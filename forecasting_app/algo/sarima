# Relevant Source Code for SARIMA 
from statsmodels.tsa.statespace.sarimax import SARIMAX 
# Function to calculate and collect model metrics for a dataset 
def calculate_model_metrics(y_true, y_pred): 
mae = mean_absolute_error(y_true, y_pred) 
mse = mean_squared_error(y_true, y_pred) 
rmse = np.sqrt(mse) 
mape = np.mean(np.abs((y_true - y_pred) / y_true)) * 100 
return {'MAE': mae, 'MSE': mse, 'RMSE': rmse, 'MAPE': mape} 
# Function to apply SARIMA model to a dataset and display results 
def apply_sarima_model(dataset_name, X_train, X_test): 
result = {} 
order = (1, 1, 1) # Order of non-seasonal part (p, d, q) 
seasonal_order = (1, 1, 1, 12) # Order of seasonal part (P, D, Q, S) 
try: 
sarima_model 
= 
SARIMAX(X_train['Quantity 
Ordered'], 
order=order, 
seasonal_order=seasonal_order) 
sarima_result = sarima_model.fit(disp=False) 
sarima_forecast = sarima_result.get_forecast(steps=len(X_test)) 
sarima_predictions = sarima_forecast.predicted_mean 
confidence_intervals = sarima_forecast.conf_int() 
# Display the test set graph and predictions with confidence intervals 
plt.figure(figsize=(10, 6)) 
plt.plot(X_test.index, X_test['Quantity Ordered'], label='Actual (Test Set)', marker='o', 
linestyle='--') 
plt.plot(sarima_predictions.index, sarima_predictions, label='SARIMA Forecast', 
marker='o', linestyle='--', color='orange') 
plt.fill_between(confidence_intervals.index, 
confidence_intervals.iloc[:, 
0], 
confidence_intervals.iloc[:, 1], color='orange', alpha=0.2, label='95% Confidence Interval') 
plt.xlabel('Weeks') 
plt.ylabel('Quantity Ordered') 
plt.title(f'{dataset_name}: Actual vs. Predicted Quantity Ordered with SARIMA') 
plt.legend() 
plt.show() 
# Display the test data table with SARIMA predictions and confidence intervals

# Display the test data table with SARIMA predictions and confidence intervals 
X_test['SARIMA_Quantity'] = sarima_predictions

X_test['SARIMA_Low_CI'] = confidence_intervals.iloc[:, 0]

X_test['SARIMA_High_CI'] = confidence_intervals.iloc[:, 1]

table_data_sarima = pd.DataFrame({

'Order Date': X_test.index,

'Actual': X_test['Quantity Ordered'],

'Forecast_SARIMA': X_test['SARIMA_Quantity'],

'Low_CI': X_test['SARIMA_Low_CI'],

'High_CI': X_test['SARIMA_High_CI']

})

table_data_sarima.reset_index(drop=True, inplace=True)

print(f"\nTest Data Table with SARIMA Predictions and Confidence Intervals for

{dataset_name}:")

print(table_data_sarima)

result

=

calculate_model_metrics(X_test['Quantity

Ordered'],

X_test['SARIMA_Quantity'])

result['Dataset'] = dataset_name

print(f"\nModel Metrics Results for Test Set with SARIMA for {dataset_name}:")

print("Mean Absolute Error (MAE):", result['MAE'])

print("Mean Squared Error (MSE):", result['MSE'])

print("Root Mean Squared Error (RMSE):", result['RMSE'])

print("Mean Absolute Percentage Error (MAPE):", result['MAPE'], "%")

except Exception as e:

print(f"Error applying SARIMA model for {dataset_name}: {e}")

result['MAE'] = result['MSE'] = result['RMSE'] = result['MAPE'] = np.nan

result['Dataset'] = dataset_name

return result

# Create an empty DataFrame to store model metrics results for all datasets

all_metrics_df_sarima = pd.DataFrame(columns=['Dataset', 'MAE', 'MSE', 'RMSE', 'MAPE'])

# ... (Remaining code for data loading, preprocessing, and iterating through datasets)

# Save the DataFrame with SARIMA model metrics to an Excel file

excel_file_path_sarima = '/content/drive/MyDrive/Barrameda\'s Group/Datasets/Source

3/SARIMA_Model_Metrics_Results.xlsx'

all_metrics_df_sarima.to_excel(excel_file_path_sarima, index=False)