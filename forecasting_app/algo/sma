import os
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

# Function to calculate SMA for a given window size

def calculate_sma(data, window_size=4):

data['SMA_Quantity'] = data['Quantity Ordered'].rolling(window=window_size).mean()

data.dropna(inplace=True)

return data

# Function to calculate and collect model metrics for a dataset

def calculate_model_metrics(y_true, y_pred):

mae = mean_absolute_error(y_true, y_pred)

mse = mean_squared_error(y_true, y_pred)

rmse = np.sqrt(mse)

mape = np.mean(np.abs((y_true - y_pred) / y_true)) * 100

return {'MAE': mae, 'MSE': mse, 'RMSE': rmse, 'MAPE': mape}

# Function to display the Test Data Table and Model Metrics Results

def display_results(X_test):

result = {}

if len(X_test) < 5:

print("Not enough data points in the test set to calculate SMA.")

result['Dataset'] = filename

result['MAE'] = result['MSE'] = result['RMSE'] = result['MAPE'] = np.nan

return result

X_test = calculate_sma(X_test)

# Display the test data table

print("\nTest Data Table:")

table_data = pd.DataFrame({

'Order Date': X_test.index,

'Actual': X_test['Quantity Ordered'], 
'SMA Forecast': X_test['SMA_Quantity'] 
})

table_data.reset_index(drop=True, inplace=True)
print(table_data)
# Plot the original data and SMA for the test set
plt.figure(figsize=(10, 6))
plt.plot(X_test.index, X_test['Quantity Ordered'], label='Actual (Test Set)', marker='o',
linestyle='--')
plt.plot(X_test.index, X_test['SMA_Quantity'],
label=f'SMA
(4-week window)',
marker='o', linestyle='--', color='orange')
plt.xlabel('Weeks')
plt.ylabel('Quantity Ordered')
plt.title('Test Set: Actual vs. Predicted Quantity Ordered with SMA')
plt.legend()
plt.show()
result = calculate_model_metrics(X_test['Quantity Ordered'], X_test['SMA_Quantity'])
result['Dataset'] = filename
print("\nModel Metrics Results for Test Set:")
print("Mean Absolute Error (MAE):", result['MAE'])
print("Mean Squared Error (MSE):", result['MSE'])
print("Root Mean Squared Error (RMSE):", result['RMSE'])
print("Mean Absolute Percentage Error (MAPE):", result['MAPE'], "%")
return result
# Create an empty DataFrame to store model metrics results for all datasets
all_metrics_df = pd.DataFrame(columns=['Dataset', 'MAE', 'MSE', 'RMSE', 'MAPE'])
# ... (Remaining code for data loading, preprocessing, and iterating through datasets)
# Save the DataFrame with model metrics to an Excel file
excel_file_path
=
'/content/drive/MyDrive/Barrameda\'s
Group/Datasets/Source
3/Model_Metrics_Results.xlsx'
all_metrics_df.to_excel(excel_file_path, index=False)